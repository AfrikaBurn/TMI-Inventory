imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: partkeepr.yml }

fos_rest:
    body_listener: true
    format_listener: true
    param_fetcher_listener: force
    view:
        exception_wrapper_handler: PartKeepr\DoctrineReflectionBundle\Exception\ExceptionWrapperHandler
        default_engine: php
        formats:
            json: true
            xml: true
        templating_formats:
            html: false
        view_response_listener: force



sensio_framework_extra:
    view:    { annotations: false }
    router:  { annotations: true }

framework:
    #esi:             ~
    #translator:      { fallback: %locale% }
    serializer:      { enable_annotations: true }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enabled: true, enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         ~
    fragments:       ~
    http_method_override: true

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    bundles:        [ PartKeeprFrontendBundle ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        #yui_css:
        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%

    orm:
        auto_generate_proxy_classes: %kernel.debug%

        entity_managers:
          default:
            auto_mapping: true
            mappings:
              model:
                type: annotation
                dir: %kernel.root_dir%/../src/backend/PartKeepr/
                prefix: PartKeepr
                is_bundle: false
              gedmo_tree:
                type: annotation
                prefix: Gedmo\Tree\Entity
                dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity"
                alias: GedmoTree # this one is optional and will default to the name set for the mapping
                is_bundle: false

stof_doctrine_extensions:
    default_locale: en_US
    orm:
        default:
            tree: true

twig:
    exception_controller: 'FOS\RestBundle\Controller\ExceptionController::showAction'

doctrine_migrations:
    dir_name: %kernel.root_dir%/../src/PartKeepr/CoreBundle/DoctrineMigrations
    namespace: PartKeepr\CoreBundle\DoctrineMigrations
    table_name: SchemaVersions
    name: Application Migrations

dunglas_api:
    title:       "PartKeepr"
    description: "The PartKeepr REST API"
    collection:
        pagination:
            items_per_page:
                enable_client_request: true

nelmio_api_doc:
    sandbox:
        accept_type:        "application/json"
        body_format:
            formats:        [ "json" ]
            default_format: "json"
        request_format:
            formats:
                json:       "application/json"

services:
    my_event_listener:
        class:    "PartKeepr\\UploadedFileBundle\\EventListener\\TemporaryFileEventListener"
        arguments:
            - "@partkeepr_uploadedfile_service"
            - "@annotation_reader"
            - "@property_accessor"
        tags:  [ { name: "kernel.event_listener", event: "api.pre_update", method: "replaceTemporaryImage" }, { name: "kernel.event_listener", event: "api.pre_create", method: "replaceTemporaryImage" } ]
    resource.order_filter:
        parent:    "api.doctrine.orm.order_filter"
        arguments: [ ~ ] # This line can also be omitted

    resource.distributor:
        parent:    "api.resource"
        arguments: [ "PartKeepr\\DistributorBundle\Entity\Distributor" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.footprint:
        parent:    "api.resource"
        arguments: [ "PartKeepr\FootprintBundle\Entity\Footprint" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.footprint_image:
        parent:    "api.resource"
        arguments: [ "PartKeepr\FootprintBundle\Entity\FootprintImage" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.footprint_attachment:
        parent:    "api.resource"
        arguments: [ "PartKeepr\FootprintBundle\Entity\FootprintAttachment" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.footprint_category.item_operation.move:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments:
             -    "@resource.footprint_category"               # Resource
             -    [ "PUT" ]                 # Methods
             -    "/footprint_categories/{id}/move"           # Path
             -    "PartKeeprFootprintBundle:FootprintCategory:move"         # Controller
             -    "FootprintCategoryMove"                 # Route name
             -    # Context (will be present in Hydra documentation)
                  "@type":       "hydra:Operation"
                  "hydra:title": "A custom operation"
                  "returns":     "xmls:string"

    resource.footprint_category.item_operation.get:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments: [ "@resource.footprint_category", "GET" ]

    resource.footprint_category.item_operation.put:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments: [ "@resource.footprint_category", "PUT" ]

    resource.footprint_category.item_operation.delete:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments: [ "@resource.footprint_category", "DELETE" ]

    resource.footprint_category:
        parent:    "api.resource"
        arguments: [ "PartKeepr\FootprintBundle\Entity\FootprintCategory" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:     "initItemOperations"
                    arguments: [ [ "@resource.footprint_category.item_operation.get", "@resource.footprint_category.item_operation.put", "@resource.footprint_category.item_operation.delete", "@resource.footprint_category.item_operation.move" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.manufacturer:
        parent:    "api.resource"
        arguments: [ "PartKeepr\\ManufacturerBundle\Entity\Manufacturer" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.manufacturer_ic_logo.item_operation.custom_get:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments:
             -    "@resource.manufacturer_ic_logo"               # Resource
             -    [ "GET" ]                 # Methods
             -    "/manufacturer_i_c_logo/{id}/getImage"           # Path
             -    "PartKeeprManufacturerBundle:ManufacturerIcLogo:getImage"         # Controller
             -    "ManufacturerIcLogoGetImage"                 # Route name
             -    # Context (will be present in Hydra documentation)
                  "@type":       "hydra:Operation"
                  "hydra:title": "A custom operation"
                  "returns":     "xmls:string"

    resource.manufacturer_ic_logo.item_operation.get:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments: [ "@resource.manufacturer_ic_logo", "GET" ]

    resource.manufacturer_ic_logo.item_operation.put:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments: [ "@resource.manufacturer_ic_logo", "PUT" ]

    resource.manufacturer_ic_logo:
        parent:    "api.resource"
        arguments: [ "PartKeepr\\ManufacturerBundle\Entity\ManufacturerICLogo" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:     "initItemOperations"
                    arguments: [ [ "@resource.manufacturer_ic_logo.item_operation.custom_get", "@resource.manufacturer_ic_logo.item_operation.get", "@resource.manufacturer_ic_logo.item_operation.put"  ] ]
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.partmeasurementunit.item_operation.custom_put:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments:
             -    "@resource.partmeasurementunit"               # Resource
             -    [ "PUT" ]                 # Methods
             -    "/part_measurement_units/{id}/setDefault"           # Path
             -    "PartKeeprPartBundle:PartMeasurementUnit:setDefault"         # Controller
             -    "PartMeasurementUnitSetDefault"                 # Route name
             -    # Context (will be present in Hydra documentation)
                  "@type":       "hydra:Operation"
                  "hydra:title": "A custom operation"
                  "returns":     "xmls:string"
    resource.partmeasurementunit.item_operation.get:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments: [ "@resource.partmeasurementunit", "GET" ]

    resource.partmeasurementunit.item_operation.put:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments: [ "@resource.partmeasurementunit", "PUT" ]

    resource.partmeasurementunit:
        parent:    "api.resource"
        arguments: [ "PartKeepr\\PartBundle\\Entity\\PartMeasurementUnit" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:     "initItemOperations"
                    arguments: [ [ "@resource.partmeasurementunit.item_operation.custom_put", "@resource.partmeasurementunit.item_operation.get", "@resource.partmeasurementunit.item_operation.put"  ] ]
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }


    resource.unit:
        parent:    "api.resource"
        arguments: [ "PartKeepr\\UnitBundle\Entity\Unit" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }

    resource.siprefix:
        parent:    "api.resource"
        arguments: [ "PartKeepr\\SiPrefixBundle\\Entity\\SiPrefix" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:    "initFilters"
                    arguments: [ [ "@resource.order_filter" ] ]
            -       method:    "initNormalizationContext"
                    arguments: [ { groups: [ "default" ] } ]
            -       method:    "initDenormalizationContext"
                    arguments:
                        - { groups: [ "default" ] }


    resource.tempimage.collection_operation.custom_post:
            class:     "Dunglas\ApiBundle\Api\Operation\Operation"
            public:    false
            factory:   [ "@api.operation_factory", "createCollectionOperation" ]
            arguments:
                 -    "@resource.tempimage"               # Resource
                 -    [ "POST" ]                 # Methods
                 -    "/temporaryImage/upload"           # Path
                 -    "PartKeeprImageBundle:TemporaryImage:upload"         # Controller
                 -    "TemporaryImageUpload"                 # Route name
                 -    # Context (will be present in Hydra documentation)
                      "@type":       "hydra:Operation"
                      "hydra:title": "A custom operation"
                      "returns":     "xmls:string"

    resource.tempimage.item_operation.custom_get:
        class:     "Dunglas\ApiBundle\Api\Operation\Operation"
        public:    false
        factory:   [ "@api.operation_factory", "createItemOperation" ]
        arguments:
             -    "@resource.tempimage"               # Resource
             -    [ "GET" ]                 # Methods
             -    "/temporaryImage/{id}/getImage"           # Path
             -    "PartKeeprImageBundle:TemporaryImage:getImage"         # Controller
             -    "TemporaryImageGet"                 # Route name
             -    # Context (will be present in Hydra documentation)
                  "@type":       "hydra:Operation"
                  "hydra:title": "A custom operation"
                  "returns":     "xmls:string"

    resource.tempimage:
        parent:    "api.resource"
        arguments: [ "PartKeepr\\ImageBundle\\Entity\\TempImage" ]
        tags:      [ { name: "api.resource" } ]
        calls:
            -       method:     "initCollectionOperations"
                    arguments: [ [ "@resource.tempimage.collection_operation.custom_post" ] ]
            -       method:     "initItemOperations"
                    arguments: [ [ "@resource.tempimage.item_operation.custom_get" ] ]